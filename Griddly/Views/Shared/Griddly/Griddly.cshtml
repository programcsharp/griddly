@*
    * Griddly renderer
    * http://griddly.com
    * Copyright 2013-2015 Chris Hynes and Data Research Group, Inc.
    * Licensed under MIT (https://github.com/programcsharp/griddly/blob/master/LICENSE)
    *
    * WARNING: Don't edit this file -- it'll be overwitten when you upgrade.
    *          Use the static properties on GriddlySettings to make config changes.
    *
*@

@model GriddlyResultPage

@{
    GriddlySettings settings = (GriddlySettings)ViewBag.settings;

    settings.Columns.RemoveAll(x => x.IsExportOnly);

    bool simple = ViewBag.isSimpleGriddly == true;
    bool isFirstRender = ViewContext.Controller.ControllerContext.IsChildAction || simple;

    if (isFirstRender)
    {
        if (GriddlySettings.BeforeRender != null)
        {
            GriddlySettings.BeforeRender(settings, Html);
        }
        
        if (settings.AllowedFilterModes == null)
        {
            FilterMode allowedModes = FilterMode.None;

            if (settings.InlineFilterTemplate != null || settings.Columns.Any(x => x.Filter != null))
            {
                allowedModes |= FilterMode.Inline;
            }

            if (settings.FilterTemplate != null || (settings.Filters.Any(x => !settings.Columns.Any(y => y.Filter == x))))
            {
                allowedModes |= FilterMode.Form;
            }

            settings.AllowedFilterModes = allowedModes;
        }
        
        if (settings.AllowedFilterModes != FilterMode.None)
        {
            if (settings.InitialFilterMode == null)
            {
                if (settings.AllowedFilterModes.Value.HasFlag(FilterMode.Inline))  
                {
                    settings.InitialFilterMode = FilterMode.Inline;
                }
                else if (settings.AllowedFilterModes.Value.HasFlag(FilterMode.Form))
                {
                    settings.InitialFilterMode = FilterMode.Form;
                }
                
                if (settings.InitialFilterMode == null || settings.InitialFilterMode == FilterMode.Both)
                {
                    throw new InvalidOperationException("Invalid InitialFilterMode: " + settings.InitialFilterMode + ".");
                }                
            }
            
            if (settings.AllowedFilterModes.Value.HasFlag(FilterMode.Inline) && settings.InlineFilterTemplate == null && settings.Columns.Any(x => x.Filter != null))
            {
                settings.InlineFilterTemplate = (x) => RenderInlineFilters(x);
            }

            if (settings.AllowedFilterModes.Value.HasFlag(FilterMode.Form) && settings.FilterTemplate == null && settings.Filters.Any())
            {
                settings.FilterTemplate = (x) => RenderFormFilters(x);
            }
        }
        else
        {
            settings.InitialFilterMode = FilterMode.None;
        }
    }

    if (Model.PopulateSummaryValues != null)
    {
        Model.PopulateSummaryValues(settings);
    }
}

@if (isFirstRender)
{
    SortField[] defaultSort = settings.DefaultSort;
    <input class="griddly-init-flag" type="hidden" />
    @:<div class="griddly griddly-init @settings.ClassName" data-role="griddly"
        @: @Html.AttributeNullable("data-griddly-url", !simple ? Url.Current() : null)
        @: data-griddly-count="@Model.Total"
        @: @Html.AttributeNullable("data-griddly-filtermode", settings.InitialFilterMode != FilterMode.None ? settings.InitialFilterMode.ToString() : null)
        @: @Html.AttributeNullable("data-griddly-allowedfiltermodes", settings.AllowedFilterModes != FilterMode.None ? Json.Encode(Enum.GetValues(typeof(FilterMode)).Cast<FilterMode>().Where(x => settings.AllowedFilterModes.Value.HasFlag(x) && x != FilterMode.Both && x != FilterMode.None).Select(x => x.ToString())) : null)
        @: data-griddly-pagesize="@(settings.PageSize ?? Model.PageSize)"
        @: @Html.AttributeNullable("data-griddly-rowclickmodal", settings.RowClickModal)
        @: data-griddly-defaultrowids="@Json.Encode(settings.DefaultRowIds != null ? settings.DefaultRowIds.Select(x => x.ToLower()).ToArray() : new[] { "value" })"
        @: data-griddly-filter-defaults="@Newtonsoft.Json.JsonConvert.SerializeObject(this.GetGriddlyDefaults())"
        @: @Html.AttributeIf("data-griddly-defaultsort", defaultSort != null && defaultSort.Any(), Html.AttributeEncode(Json.Encode(defaultSort.Select(x => new { Field = x.Field, Direction = x.Direction.ToString() }))))
        @: @settings.HtmlAttributes.ToHtmlAttributes()>
    if (settings.Buttons.Any())
    {
        <div class="buttons">
            @Html.Partial(GriddlySettings.ButtonListTemplate, new ViewDataDictionary(settings.Buttons)
            {
                { "ResolveContext", ViewContext.ParentActionViewContext != null ? ViewContext.ParentActionViewContext.ViewData.Model : null }
            })
        </div>
    }
    if (settings.BeforeTemplate != null)
    {
        @settings.BeforeTemplate(null)
    }
    @:<div class="griddly-scrollable-container">
        @:<table class="@settings.TableClassName" @settings.TableHtmlAttributes.ToHtmlAttributes()>
            <colgroup>
                @foreach (GriddlyColumn column in settings.Columns)
                {
                    <col @Html.AttributeIf("style", column.Width != null, "width:" + column.Width) data-field="@Griddly.Mvc.GriddlyFilterExtensions.GetField(column)" />
                }
            </colgroup>
    <thead>
        @if (!string.IsNullOrWhiteSpace(settings.Title))
        {
            <tr class="header">
                <td colspan="@settings.Columns.Count">@settings.Title
                    
                    @if (settings.ShowRowSelectCount)
                    {
                        <span class="griddly-selection" style="display:none;">
                            <span><span class="griddly-selection-count">0</span> rows selected</span>
                            <span><a class="griddly-selection-clear" href="javascript:;">Clear</a></span>
                        </span>
                    }
                </td>
            </tr>
        }
        @if (settings.AllowedFilterModes != FilterMode.None && settings.AllowedFilterModes.Value.HasFlag(FilterMode.Form))
        {
        <tr class="griddly-filters griddly-filters-form" style="@(settings.InitialFilterMode == FilterMode.Form ? null : "display:none")">
            <td colspan="@settings.Columns.Count">
                @if (settings.FilterTemplate != null)
                {
                    @settings.FilterTemplate(settings)
                }
            </td>
        </tr>
        }
        <tr class="columnHeaders">
            @foreach (GriddlyColumn column in settings.Columns)
            {
                bool isSortable = !simple && !string.IsNullOrWhiteSpace(column.ExpressionString);
                <th class="@column.ClassName @(isSortable ? "sortable" : null) @(column is GriddlySelectColumn ? "select" : null) @(column.DefaultSort != null ? (column.DefaultSort == SortDirection.Descending ? "sorted_d" : "sorted_a") : null)" @Html.AttributeNullable("data-griddly-sortfield", simple ? null : column.ExpressionString) @column.HeaderHtmlAttributes.ToHtmlAttributes()>
                    @if (isSortable)
                    {
                        <text>@column.Caption<span class="icon">&nbsp;</span></text>
                    }
                    else if (column is GriddlySelectColumn)
                    {
                        <i class="glyphicon glyphicon-check"></i>
                    }
                    else
                    {
                        @column.Caption
                    }
                </th>
            }
        </tr>
        @if (settings.AllowedFilterModes != FilterMode.None && settings.AllowedFilterModes.Value.HasFlag(FilterMode.Inline))
        {
            <tr class="griddly-filters griddly-filters-inline" style="@(settings.InitialFilterMode == FilterMode.Inline ? null : "display:none")">@settings.InlineFilterTemplate(settings)</tr>
        }
        @if (settings.HeaderTemplate != null)
        {
            <tr class="griddly-header">
                <td colspan="@settings.Columns.Count">
                    @settings.HeaderTemplate(Model)
                </td>
            </tr>
        }
    </thead>
}
<tbody class="data">
    @foreach (object row in Model.Data)
    {
        <tr @Html.AttributeIf("data-griddly-url", settings.RowClickUrl != null, @<text> @settings.RowClickUrl(row) </text> )
            @Html.AttributeIf("class", settings.RowClass != null, @<text> @settings.RowClass(row) </text> )
            @Html.AttributeNullable("data-id", TryEval(row, settings.IdProperty))
            @foreach (var x in settings.RowIds)
            {
                @: data-rowid-@(x.Key)="@(x.Value(row))"
            }
            data-rowkey="@("_" + string.Join("_", settings.RowIds.Select(x => { var val = x.Value(row); return val == null ? "" : val.ToString(); }).ToArray()))"
            @settings.GenerateRowHtmlAttributes(row).ToHtmlAttributes()>
            @foreach (GriddlyColumn column in settings.Columns)
            {
                var underlyingValue = column.RenderUnderlyingValue(row);
                <td class="@column.RenderClassName(row, Model)" @column.GenerateHtmlAttributes(row, Model).ToHtmlAttributes()  @if (underlyingValue != null) { <text>data-value="@underlyingValue"</text> }>@column.RenderCell(row, settings)</td>
            }
        </tr>
    }
</tbody>
@if (settings.Columns.Any(x => x.SummaryFunction != null || x.SummaryValue != null))
{
    <tfoot>
        <tr>
            @foreach (GriddlyColumn column in settings.Columns)
            {
                <td>@column.RenderValue(column.SummaryValue)</td>
            }
        </tr>
    </tfoot>
}
@if (isFirstRender)
{
    @:</table>
    @:</div>
    <div class="griddly-footer">
        @if (settings.FooterTemplate == null || simple)
        {
            <span class="griddly-summary">Records @(Model.PageNumber * Model.PageSize + (Model.Total > 0 ? 1 : 0)) through @(Model.PageNumber * Model.PageSize + Model.Count) of @Model.Total</span>
            <span class="griddly-pager" style="@(Model.Total <= Model.PageSize ? "display:none" : null)">
                <a class="prev" href="javascript:void(0)" style="@(Model.PageNumber == 0 ? "display:none" : null)">&lt;&lt; Previous</a>Page
                <input type="text" class="pageNumber" value="@(Model.Total > 0 ? (Model.PageNumber + 1) : 0)"> of <span class="pageCount">@(Model.Total > 0 ? (Model.Total / Model.PageSize + 1) : 0)</span>
                <a class="next" style="@(Model.Total < Model.PageSize ? "display:none" : null)" href="javascript:void(0)">Next &gt;&gt;</a>
            </span>
        }
        else
        {
            @settings.FooterTemplate(Model)
        }
    </div>

    if (settings.AfterTemplate != null)
    {
        @settings.AfterTemplate(null)
    }
    @:</div>
}

@functions
{
    string TryEval(object obj, string prop)
    {
        try
        {
            return DataBinder.Eval(obj, prop).ToString();
        }
        catch { return null; }
    }
}

@helper RenderFormFilters(GriddlySettings settings)
{
    <form class="filterForm novalidate form-horizontal">
        @Html.Partial("Griddly/GriddlyFilterForm", settings)

        <div class="form-group form-group-sm">
            <div class="col-sm-offset-2 col-sm-10">
                <button type="submit" class="btn btn-primary">Search</button>
            </div>
        </div>

        <input type="hidden" name="query" value="true" />
    </form>
}

@helper RenderInlineFilters(GriddlySettings settings)
{
    @Html.Partial("Griddly/GriddlyFilterInline", settings)
}